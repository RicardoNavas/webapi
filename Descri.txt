API.NET8

1. CREAR EN VRS .NET7 O .NET8
1.1 EN NUGET (INSTALA MICROSOFT.ENTITYFRAMEWORKCORE.SQLSERVER 9.0.4)
1.2 EN NUGET (INSTALA 
MICROSOFT.ENTITYFRAMEWORKCORE.TOOLS 9.0.4)

2. EN NUGET CONSOLA DIGITAS LO SIGUIENTE:
  (MAPEO Y ACCESO A BASE DE DATOS) 

Scaffold-DbContext "Server=DESKTOPRNAVAS\SQLEXPRESS;Database=BDD_Automotores;User ID=sa;Password=123;TrustServerCertificate=True;" Microsoft.EntityFrameworkCore.SqlServer 

3. Borrar Dentro del Metodo OnConfiguring la cadena de conexion y dejarlo en blanco de la clase contex.cs de Models

4. CONECTION STRINGS (ADICIONAR LA CADENA DE CONEXION EN APPSETTINGS JSON)

"AllowedHosts": "*",
"ConnectionStrings": {   
  "cadenaSQL": 
  "Server=DESKTOPRNAVAS\\SQLEXPRESS;Database=BDD_Automotores;User ID=sa;Password=123;TrustServerCertificate=True;"

}

5. CONFIGURAR CONTEXT EN PROGRAM.CS
   using Microsoft.EntityFrameworkCore;
   using API_PRODUCTO_Models

   -- CONFIGURA EL CONTEXT
   builder.Services.AddDbContext<BddAutomotoresContext>(option =>
	{
    option.UseSqlServer(builder.Configuration.GetConnectionString("cadenaSQL"));

	});

6. Agregar CONTROLADOR API EN BLANCO 

ADICIONAS LIBRERIAS
using Microsoft.EntityFrameworkCore;
using API_PRODUCTO.Models;

Y PONES TODO ESTE CODIGO

using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;

using Microsoft.EntityFrameworkCore;
using API_PRODUCTO.Models;


namespace API_PRODUCTO.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ProductosController : ControllerBase
    {

        private readonly BddAutomotoresContext _baseDatos;

        public ProductosController(BddAutomotoresContext baseDatos)
        {
            _baseDatos = baseDatos;
        }

        [HttpGet]
        [Route("lista")]
        public async Task<IActionResult> Lista()
        {
            var productos = await _baseDatos.Productos.ToListAsync();

            if (productos == null || !productos.Any())
            {
                return NotFound("NO SE ENCONTRARON PRODUCTOS.");
            }

            return Ok(productos);
        }


        // GET: api/productos/obtener/5
        [HttpGet]
        [Route("obtener/{id}")]
        public async Task<IActionResult> GetProducto(int id)
        {
            var producto = await _baseDatos.Productos.FindAsync(id);

            if (producto == null)
            {
                return NotFound($"NO SE ENCONTRO EL PRODUCTO CON EL ID: {id}.");
            }

            return Ok(producto);
        }

        // PUT: api/productos/actualizar/5
        [HttpPut]
        [Route("actualizar/{id:int}")]
        public async Task<IActionResult> ActualizarProducto(int id, [FromBody] Producto producto)
        {
            if (id != producto.Id)
            {
                return BadRequest("EL ID DEL PRODUCTO NO COINCIDE CON EL ID ENVIADO.");
            }

            var productoExistente = await _baseDatos.Productos.FindAsync(id);

            if (productoExistente == null)
            {
                return NotFound($"NO SE ENCONTRO EL PRODUCTO CON ID: {id}.");
            }

            // Actualizar campos
            productoExistente.Nombre = producto.Nombre;
            productoExistente.Precio = producto.Precio;
            productoExistente.Cantidad = producto.Cantidad;

            try
            {
                await _baseDatos.SaveChangesAsync();
                return Ok("PRODUCTO ACTUALIZADO CORRECTAMENTE.");
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"ERROR AL ACTUALIZAR EL PRODUCTO: {ex.Message}");
            }
        }


        // DELETE: api/productos/eliminar/5
        [HttpDelete]
        [Route("eliminar/{id:int}")]
        public async Task<IActionResult> EliminarProducto(int id)
        {
            var producto = await _baseDatos.Productos.FindAsync(id);

            if (producto == null)
            {
                return NotFound($"NO SE ENCONTRO EL PRODUCTO CON ID {id}.");
            }

            _baseDatos.Productos.Remove(producto);

            try
            {
                await _baseDatos.SaveChangesAsync();
                return Ok("PRODUCTO ELIMINADO CORRECTAMENTE.");
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"ERROR AL ELIMINAR EL PRODUCTO: {ex.Message}");
            }
        }

    }
}


7. SEGURIDAD - ACTIVAR CORS PARA ACCEDER


using Microsoft.EntityFrameworkCore;
using API_PRODUCTO.Models;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.

builder.Services.AddControllers();
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();


//BD - CONTEXTO

builder.Services.AddDbContext<BddAutomotoresContext>(option =>
{
    option.UseSqlServer(builder.Configuration.GetConnectionString("cadenaSQL"));

});


//HABILITAR SEGURIDAD - CORS

builder.Services.AddCors(options =>
{
    options.AddPolicy("NuevaPolitica", app =>
    {
        app.AllowAnyOrigin()
        .AllowAnyHeader()
        .AllowAnyMethod();
    });
});


var app = builder.Build();

// Configure the HTTP request pipeline.
app.UseSwagger();
app.UseSwaggerUI();

app.UseCors("Nueva Politica");

app.UseAuthorization();

app.MapControllers();

app.Run();











